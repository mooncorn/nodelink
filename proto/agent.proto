syntax = "proto3";

package pb;

option go_package = "github.com/mooncorn/nodelink/proto/pb";

service AgentService {
  // Simple request/response for immediate operations
  rpc ExecuteCommand(CommandRequest) returns (CommandResponse);
  rpc GetSystemInfo(SystemInfoRequest) returns (SystemInfoResponse);
  rpc ManageDocker(DockerRequest) returns (DockerResponse);
  rpc CancelTask(TaskCancelRequest) returns (TaskCancelResponse);
  
  // Streaming for long-running operations with real-time updates
  rpc StreamCommand(CommandRequest) returns (stream CommandStreamResponse);
  rpc StreamDockerLogs(DockerLogsRequest) returns (stream DockerLogsResponse);
  rpc StreamMetrics(MetricsStreamRequest) returns (stream MetricsStreamResponse);
  
  // Bidirectional streaming for complex agent management
  // rpc ManageAgent(stream AgentMessage) returns (stream AgentMessage);

  rpc HeartbeatStream(stream AgentMessage) returns (stream ServerMessage);
}

message Heartbeat {
  string version = 1;
  int64 uptime_seconds = 2;
}

// Server messages sent to agents
message ServerMessage {
  string message_id = 1;
  int64 timestamp = 2;
  
  oneof message {
    PingMessage ping = 3;
    AckMessage ack = 4;
    ConfigUpdate config_update = 5;
  }
}

message PingMessage {
  int64 timestamp = 1;
  string challenge = 2;
}

message PongMessage {
  int64 ping_timestamp = 1;
  string challenge_response = 2;
  int64 pong_timestamp = 3;
}

message AckMessage {
  string ack_message_id = 1;
  bool success = 2;
  string error_message = 3;
}

message ConfigUpdate {
  map<string, string> settings = 1;
  bool requires_restart = 2;
}

// Common metadata for all requests
message RequestMetadata {
  string agent_id = 1;
  string request_id = 2;  // For correlation
  int64 timestamp = 3;
  map<string, string> labels = 4;
}

// Simple command execution (immediate response)
message CommandRequest {
  RequestMetadata metadata = 1;
  string command = 2;
  map<string, string> environment = 3;
  string working_directory = 4;
  uint32 timeout_seconds = 5;
}

message CommandResponse {
  string request_id = 1;
  int32 exit_code = 2;
  string stdout = 3;
  string stderr = 4;
  bool timed_out = 5;
  int64 execution_time_ms = 6;
}

// Streaming command execution (real-time output)
message CommandStreamResponse {
  string request_id = 1;
  
  enum StreamType {
    STDOUT = 0;
    STDERR = 1;
    EXIT = 2;
    ERROR = 3;
  }
  StreamType type = 2;
  
  string data = 3;           // Output chunk or error message
  int32 exit_code = 4;       // Only set when type = EXIT
  int64 timestamp = 5;
  bool is_final = 6;
}

// Docker operations
message DockerRequest {
  RequestMetadata metadata = 1;
  
  oneof operation {
    DockerRunRequest run = 2;
    DockerStopRequest stop = 3;
    DockerStartRequest start = 4;
    DockerInspectRequest inspect = 5;
  }
}

message DockerRunRequest {
  string image = 1;
  repeated string command = 2;
  map<string, string> environment = 3;
  repeated string ports = 4;  // Format: "host:container"
  repeated string volumes = 5; // Format: "host:container"
  string name = 6;
}

message DockerStopRequest {
  string container_id = 1;
  uint32 timeout_seconds = 2;
}

message DockerStartRequest {
  string container_id = 1;
}

message DockerInspectRequest {
  string container_id = 1;
}

message DockerResponse {
  string request_id = 1;
  bool success = 2;
  string message = 3;
  
  oneof result {
    DockerRunResult run_result = 4;
    DockerContainerInfo container_info = 5;
  }
}

message DockerRunResult {
  string container_id = 1;
  string name = 2;
  repeated string ports = 3;
  string status = 4;
}

message DockerContainerInfo {
  string container_id = 1;
  string name = 2;
  string image = 3;
  string status = 4;
  repeated string ports = 5;
  int64 created_timestamp = 6;
}

// Docker logs streaming
message DockerLogsRequest {
  RequestMetadata metadata = 1;
  string container_id = 2;
  bool follow = 3;           // Stream new logs
  uint32 tail_lines = 4;     // Number of recent lines to include
  bool include_timestamps = 5;
}

message DockerLogsResponse {
  string request_id = 1;
  string container_id = 2;
  string stream = 3;         // "stdout" or "stderr"
  string line = 4;
  int64 timestamp = 5;
  bool is_final = 6;
}

// System information (simple req/res)
message SystemInfoRequest {
  RequestMetadata metadata = 1;
  bool include_hardware = 2;
  bool include_software = 3;
  bool include_network = 4;
  bool include_processes = 5;
}

// Metrics streaming
message MetricsStreamRequest {
  RequestMetadata metadata = 1;
  
  enum Action {
    START = 0;
    STOP = 1;
    UPDATE_INTERVAL = 2;
  }
  Action action = 2;
  uint32 interval_seconds = 3;
  repeated string metric_types = 4;  // "cpu", "memory", "disk", "network"
  map<string, string> filters = 5;   // e.g., "disk.device" = "/dev/sda1"
}

message MetricsStreamResponse {
  string request_id = 1;
  int64 timestamp = 2;
  
  oneof metrics {
    CpuMetrics cpu = 3;
    MemoryMetrics memory = 4;
    DiskMetrics disk = 5;
    NetworkMetrics network = 6;
    ProcessMetrics processes = 7;
    LoadMetrics load = 8;
  }
  
  bool is_final = 9;
}

// Task cancellation
message TaskCancelRequest {
  RequestMetadata metadata = 1;
  string target_request_id = 2;  // ID of request to cancel
  string reason = 3;
}

message TaskCancelResponse {
  string request_id = 1;
  bool success = 2;
  string message = 3;
}

// Bidirectional agent management (for complex scenarios)
message AgentMessage {
  string agent_id = 1;
  string message_id = 2;
  int64 timestamp = 3;
  
  oneof payload {
    AgentHeartbeat heartbeat = 4;
    AgentCapabilities capabilities = 5;
    AgentStatus status = 6;
    TaskAssignment task_assignment = 7;
    TaskUpdate task_update = 8;
    PongMessage pong = 9;
  }
}

message AgentHeartbeat {
  string version = 1;
  int64 uptime_seconds = 2;
  uint32 active_tasks = 3;
}

message AgentCapabilities {
  repeated string supported_commands = 1;
  bool docker_available = 2;
  bool metrics_available = 3;
  string os_type = 4;
  string architecture = 5;
}

message AgentStatus {
  enum Status {
    UNKNOWN = 0;
    HEALTHY = 1;
    DEGRADED = 2;
    UNHEALTHY = 3;
    OFFLINE = 4;
  }
  Status status = 1;
  string message = 2;
  repeated string errors = 3;
}

message TaskAssignment {
  string task_id = 1;
  string task_type = 2;      // "command", "docker", "metrics"
  bytes task_payload = 3;    // Serialized task-specific request
  uint32 priority = 4;
  int64 deadline_timestamp = 5;
}

message TaskUpdate {
  string task_id = 1;
  
  enum TaskStatus {
    PENDING = 0;
    RUNNING = 1;
    COMPLETED = 2;
    FAILED = 3;
    CANCELLED = 4;
  }
  TaskStatus status = 2;
  
  double progress_percent = 3;
  string message = 4;
  bytes result_payload = 5;  // Serialized task-specific response
  bool is_final = 6;
}

// System information structures
message SystemInfoResponse {
  SystemHardware hardware = 1;
  SystemSoftware software = 2;
  repeated NetworkInterface network_interfaces = 3;
  uint64 timestamp = 4;
}

message SystemHardware {
  CpuInfo cpu = 1;
  MemoryInfo memory = 2;
  repeated DiskInfo disks = 3;
  string architecture = 4;
  uint32 core_count = 5;
  uint32 thread_count = 6;
}

message CpuInfo {
  string model = 1;
  uint32 cores = 2;
  uint32 threads = 3;
  double base_frequency_ghz = 4;
  double max_frequency_ghz = 5;
  repeated string features = 6;
}

message MemoryInfo {
  uint64 total_bytes = 1;
  uint64 available_bytes = 2;
  string memory_type = 3;
  uint32 speed_mhz = 4;
}

message DiskInfo {
  string device = 1;
  string mount_point = 2;
  string filesystem = 3;
  uint64 total_bytes = 4;
  uint64 available_bytes = 5;
  string disk_type = 6;
}

message NetworkInterface {
  string name = 1;
  string mac_address = 2;
  repeated string ip_addresses = 3;
  uint64 speed_mbps = 4;
  bool is_up = 5;
}

message SystemSoftware {
  OperatingSystem os = 1;
  string hostname = 2;
  uint64 uptime_seconds = 3;
  repeated InstalledPackage packages = 4;
}

message OperatingSystem {
  string name = 1;
  string version = 2;
  string kernel_version = 3;
  string distribution = 4;
}

message InstalledPackage {
  string name = 1;
  string version = 2;
  string package_manager = 3;
}

// Real-time metrics data
message MetricsDataResponse {
  uint64 timestamp = 1;
  CpuMetrics cpu = 2;
  MemoryMetrics memory = 3;
  repeated DiskMetrics disks = 4;
  repeated NetworkMetrics network_interfaces = 5;
  ProcessMetrics processes = 6;
  LoadMetrics load = 7;
}

message CpuMetrics {
  double usage_percent = 1;
  repeated double core_usage = 2;
  double user_percent = 3;
  double system_percent = 4;
  double idle_percent = 5;
  double iowait_percent = 6;
  double temperature_celsius = 7;
}

message MemoryMetrics {
  uint64 total_bytes = 1;
  uint64 used_bytes = 2;
  uint64 available_bytes = 3;
  uint64 free_bytes = 4;
  uint64 cached_bytes = 5;
  uint64 buffers_bytes = 6;
  double usage_percent = 7;
  uint64 swap_total_bytes = 8;
  uint64 swap_used_bytes = 9;
  uint64 swap_free_bytes = 10;
  double swap_usage_percent = 11;
}

message DiskMetrics {
  string device = 1;
  string mount_point = 2;
  uint64 total_bytes = 3;
  uint64 used_bytes = 4;
  uint64 available_bytes = 5;
  double usage_percent = 6;
  uint64 read_bytes_per_sec = 7;
  uint64 write_bytes_per_sec = 8;
  uint64 read_ops_per_sec = 9;
  uint64 write_ops_per_sec = 10;
  double io_util_percent = 11;
}

message NetworkMetrics {
  string interface = 1;
  uint64 bytes_sent_per_sec = 2;
  uint64 bytes_recv_per_sec = 3;
  uint64 packets_sent_per_sec = 4;
  uint64 packets_recv_per_sec = 5;
  uint64 errors_in = 6;
  uint64 errors_out = 7;
  uint64 drops_in = 8;
  uint64 drops_out = 9;
}

message ProcessMetrics {
  uint32 total_processes = 1;
  uint32 running_processes = 2;
  uint32 sleeping_processes = 3;
  uint32 zombie_processes = 4;
  repeated TaskProcessMetrics task_processes = 5;
}

message TaskProcessMetrics {
  string task_id = 1;
  uint32 pid = 2;
  double cpu_percent = 3;
  uint64 memory_bytes = 4;
  uint64 virtual_memory_bytes = 5;
  uint32 threads = 6;
  uint64 read_bytes = 7;
  uint64 write_bytes = 8;
}

message LoadMetrics {
  double load1 = 1;
  double load5 = 2;
  double load15 = 3;
}

// Historical metrics query
message MetricsQueryResponse {
  repeated MetricsTimePoint data_points = 1;
  uint64 query_start_timestamp = 2;
  uint64 query_end_timestamp = 3;
  uint32 total_points = 4;
  bool truncated = 5;
}

message MetricsTimePoint {
  uint64 timestamp = 1;
  map<string, double> values = 2;
}
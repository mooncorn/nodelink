name: Build and Release Agent

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release"
        required: true
        default: "v0.0.1"

# Set required permissions for GITHUB_TOKEN
permissions:
  contents: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    environment: agent-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Get version
        id: get_version
        run: |
          VERSION="${{ github.event.inputs.tag }}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Display version
        run: |
          echo "Version: ${{ steps.get_version.outputs.version }}"

      - name: Download dependencies
        run: |
          cd agent
          go mod download
          go mod verify

      - name: Build for Linux
        run: |
          cd agent
          VERSION=${{ steps.get_version.outputs.version }}
          SERVER_ADDRESS=${{ vars.SERVER_ADDRESS }}

          mkdir -p dist

          # Linux AMD64
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=${VERSION} -X main.ServerAddress=${SERVER_ADDRESS}" -o dist/nodelink-agent-linux-amd64 ./cmd/agent
          tar -czf dist/nodelink-agent_linux_amd64.tar.gz -C dist nodelink-agent-linux-amd64

          # Linux ARM64
          GOOS=linux GOARCH=arm64 go build -ldflags "-X main.Version=${VERSION} -X main.ServerAddress=${SERVER_ADDRESS}" -o dist/nodelink-agent-linux-arm64 ./cmd/agent
          tar -czf dist/nodelink-agent_linux_arm64.tar.gz -C dist nodelink-agent-linux-arm64

      - name: Prepare versioned scripts
        run: |
          cd agent
          VERSION=${{ steps.get_version.outputs.version }}
          
          # Create versioned setup script
          sed "s/VERSION=\"__VERSION_PLACEHOLDER__\"/VERSION=\"${VERSION}\"/" scripts/setup.sh > dist/setup.sh
          chmod +x dist/setup.sh
          
          # Create versioned uninstall script  
          sed "s/VERSION=\"__VERSION_PLACEHOLDER__\"/VERSION=\"${VERSION}\"/" scripts/uninstall.sh > dist/uninstall.sh
          chmod +x dist/uninstall.sh
          
          # Create versioned updater script
          sed "s/VERSION=\"__VERSION_PLACEHOLDER__\"/VERSION=\"${VERSION}\"/" scripts/updater.sh > dist/updater.sh
          chmod +x dist/updater.sh

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Agent ${{ steps.get_version.outputs.version }}
          body: |
            ## Agent ${{ steps.get_version.outputs.version }}

            ### Quick Install (Linux)
            ```bash
            # Download and run setup script for this specific version
            curl -L https://github.com/mooncorn/nodelink/releases/download/${{ steps.get_version.outputs.version }}/setup.sh -o setup.sh
            chmod +x setup.sh
            sudo AGENT_ID=my-agent AGENT_TOKEN=secret ./setup.sh
            ```
            
            **Note:** This script will install exactly version ${{ steps.get_version.outputs.version }}. The agent's built-in updater will handle future upgrades.

            ### Configuration

            The agent requires the following environment variables:
            - `AGENT_ID`: Unique identifier for this agent
            - `AGENT_TOKEN`: Authentication token

            ### Uninstall
            
            To completely remove the agent:
            ```bash
            # Download and run uninstall script (use same version as installed agent)
            curl -L https://github.com/mooncorn/nodelink/releases/download/${{ steps.get_version.outputs.version }}/uninstall.sh -o uninstall.sh
            chmod +x uninstall.sh
            sudo ./uninstall.sh
            ```
          draft: false
          prerelease: false
          files: |
            ./agent/dist/nodelink-agent_linux_amd64.tar.gz
            ./agent/dist/nodelink-agent_linux_arm64.tar.gz
            ./agent/dist/setup.sh
            ./agent/dist/uninstall.sh
            ./agent/dist/updater.sh
